#!/usr/bin/env bash
# This access the Jira board and can do various actions on the boards and tickets.
DISABLE_END=1
TIME_ONLY=1
source $BASH_LIB

JIRA_CONFIG="$HOME/.jira.json"

if [ ! -f "$JIRA_CONFIG" ]; then
  log_error "File does not exist: $JIRA_CONFIG"
  cat - > "$JIRA_CONFIG" <<EOF
{
  "default": "name",
  "name": {
    "auth": "<username>:<password>",
    "base": "<base url>",
    "project": "<default project>",
    "user": "<your username>"
  },
  "queries": {
    "query_name": {
      "query":"",
      "jq":""
    }
  }
}
EOF
  exit 1
fi

check_file_exists "$JIRA_CONFIG"

JQ_GET_DEFAULT=".default"

if [ -z "$JIRA" ]; then
  JIRA="$(jq -r "$JQ_GET_DEFAULT" "$JIRA_CONFIG")"
fi

jira_auth="$(jq -r "\"\(.$JIRA.auth)\"" "$JIRA_CONFIG")"
jira_base="$(jq -r "\"\(.$JIRA.base)\"" "$JIRA_CONFIG")"
jira_project="$(jq -r "\"\(.$JIRA.project)\"" "$JIRA_CONFIG")"
jira_user="$(jq -r "\"\(.$JIRA.user)\"" "$JIRA_CONFIG")"

check_not_null "$jira_auth"
check_not_null "$jira_base"
check_not_null "$jira_project"
check_not_null "$jira_user"

urlencode() {
  local LANG=C i c e=''
  for ((i=0;i<${#1};i++)); do
    c=${1:$i:1}
    [[ "$c" =~ [a-zA-Z0-9\.\~\_\-] ]] || printf -v c '%%%02X' "'$c"
    e+="$c"
  done
  echo "$e"
}

################################################################################
# Given a JQL fetches all the tickets using the provided JQ script             #
################################################################################
fetch_all_for_jql()
{
  JQL="$(urlencode "$1")"
  raw_data_previous="$(curl -s -u "$jira_auth" -H 'Content-Type: application/json' "$jira_base/rest/api/2/search?jql=$JQL")"

  echo "$raw_data_previous" | jq -r "$2" 2>/dev/null

  total="$(echo "$raw_data_previous" | jq -r '. | "\(.total)"')"
  if [[ $total -ge 50 ]]; then
    for i in $(seq 50 50 "$total"); do
      curl -s -u "$jira_auth" -H 'Content-Type: application/json' "$jira_base/rest/api/2/search?jql=$JQL&startAt=$i" | jq -r "$2" 2>/dev/null
    done
  fi
}

################################################################################
# Runs the specified query                                                     #
################################################################################
run_query()
{
  query="$(jq -r ".queries.$1.query" "$JIRA_CONFIG" | sed "s/##PROJECT##/$jira_project/" | sed "s/##USER##/$jira_user/")"
  jql="$(jq -r ".queries.$1.jq" "$JIRA_CONFIG")"
  check_not_null "$query"
  check_not_null "$jql"
  fetch_all_for_jql "$query" "$jql"
}

################################################################################
# Fetches all tickets which are not assigned to anyone                         #
################################################################################
all_open_tickets()
{
  fetch_all_for_jql "project = $jira_project AND status not in (Done, Resolved, Closed) and assignee = EMPTY" '.issues[] | "\(.key) \(.fields.summary)"'
}

################################################################################
# Gets all tickets completed by me since the beginning of 2017                 #
################################################################################
get_tickets()
{
  fetch_all_for_jql "resolutiondate > \"2017/01/01\" and assignee = \"$jira_user\" ORDER BY updated ASC" '.issues[] | "\(.fields.updated): \(.key) \(.fields.summary)"'
}

################################################################################
# Gets the counts of statuses of tickets that are open                         #
################################################################################
counts()
{
  all_open_tickets | cut -d':' -f1 | sort | uniq -c
}

################################################################################
# Fetches tickets assigned to me                                               #
################################################################################
my_board()
{
  base_query="(Sprint in openSprints() AND project = $jira_project) AND assignee = \"$jira_user\""

  jq_query='.issues[] | "\(.key): \(.fields.summary)"'


  echo "To Do:"
  fetch_all_for_jql "$base_query AND Status IN (Registered) ORDER BY Rank ASC" "$jq_query" | nl

  echo -e "\nIn Progress:"
  fetch_all_for_jql "$base_query AND Status IN (\"In Progress\") ORDER BY Rank ASC" "$jq_query" | nl

  echo -e "\nTesting:"
  fetch_all_for_jql "$base_query AND Status IN (Testing) ORDER BY Rank ASC" "$jq_query" | nl

  echo -e "\nOther:"
  fetch_all_for_jql "$base_query AND Status NOT IN (Registered, \"In Progress\", Testing, Done, Resolved, Closed) ORDER BY Rank ASC" "$jq_query" | nl

  echo -e "\nDone:"
  fetch_all_for_jql "$base_query AND Status IN (Done, Resolved, Closed) ORDER BY Rank ASC" "$jq_query" | nl
}

################################################################################
# Fetch my tickets that are in $jira_project and not resolved                  #
################################################################################
mine()
{
  fetch_all_for_jql "(project = $jira_project) and assignee = \"$jira_user\" and status not in (Resolved, Done, Closed)" '.issues[] | "\(.key) \(.fields.summary)"'
}

tickets_done()
{
  fetch_all_for_jql "(project = $jira_project) and assignee = \"$jira_user\" and status in (Resolved, Done, Closed)" '.issues[] | "\(.fields.updated): \(.key) \(.fields.summary)"'
}

view_backlog()
{
  fetch_all_for_jql "(project = $jira_project) and (Sprint not in openSprints()) and status not in (Resolved, Done, Closed)" '.issues[] | "\(.key): \(.fields.summary)"'
}

################################################################################
# Move provided ticket to In Progress                                          #
################################################################################
move_to_in_progress()
{
  curl -s -u "$jira_auth" -X POST --data "{\"transition\": {\"id\": \"4\"}}" -H "Content-Type: application/json" "$jira_base/rest/api/2/issue/$1/transitions" > /dev/null
}

################################################################################
# Add provided comment to provided ticket                                      #
################################################################################
comment()
{
  curl -s -u "$jira_auth" -X POST --data "$(echo "{\"body\": \"$2\"}" | sed 's/$/\\n/' | tr -d '\n')" -H "Content-Type: application/json" "$jira_base/rest/api/2/issue/$1/comment" > /dev/null
}

################################################################################
# Move provided to Resolved with failure type                                  #
################################################################################
assign_to_me()
{
  curl -s -u "$jira_auth" -H "Content-Type: application/json" -X PUT -d "{\"name\":\"$jira_user\"}" "$jira_base/rest/api/2/issue/$1/assignee"
}

################################################################################
# Upload given file to given ticket                                            #
################################################################################
file_upload()
{
  curl -s -u "$jira_auth" -X POST -H "X-Atlassian-Token: nocheck" -F "file=@$2" "$jira_base/rest/api/2/issue/$1/attachments" > /dev/null
}

view_ticket()
{
  data="$(curl -s -u "$jira_auth" -H "X-Atlassian-Token: nocheck" "$jira_base/rest/api/2/issue/$1")"

  output="$(
    echo "# $1 : $(echo "$data" | jq -r '.fields.summary')"
    echo "$data" | jq -r '.fields.description' | sed 's/^h1./##/g'

    echo
    echo "# Comments"
    echo "$data" | jq -r '.fields.comment.comments[] | "## \(.updated) : \(.author.name)\n\(.body)"'
  )"
  if hash mdv 2>/dev/null; then
    echo "$output" | mdv -
  else
    echo "$output"
  fi
}

work_log()
{
  data="$(curl -s -u "$jira_auth" -H "X-Atlassian-Token: nocheck" "$jira_base/rest/api/2/issue/$1/worklog")"
  echo "$data" | jq -rc '.worklogs[] | {author:.author.name, started:.started, spent:.timeSpent, spentSeconds: .timeSpentSeconds}'
}

ticket()
{
  curl -s -u "$jira_auth" -H "X-Atlassian-Token: nocheck" "$jira_base/rest/api/2/issue/$1"
}

work_time()
{
  monday="$(date -d'last sunday' +%Y%m%d)"
  jql='worklogAuthor = currentUser() AND worklogDate >= startOfWeek()'
  records="$(fetch_all_for_jql "$jql" '.issues[] | "\(.key)"' | while read issue; do
    work_log "$issue"| while read time_log; do
      user="$(echo "$time_log" | jq -r .author)"
      if [[ "$user" == "$jira_user" ]]; then
        started="$(echo "$time_log" | jq -r .started)"
        date_start="$(echo "$started" | cut -c 1-10 | tr -d '-')"
        time_start="$(echo "$started" | cut -c 12-20)"
        spent="$(echo "$time_log" | jq -r .spent)"
        spentSeconds="$(echo "$time_log" | jq -r .spentSeconds)"
        if [[ $date_start -ge $monday ]]; then
          echo "$(echo "$started" | cut -c 1-10) - $time_start $spent [$issue] |$spentSeconds"
        fi
      fi
    done
  done | sort)"
  echo "Time spent this week: $(echo "$records" | cut -d'|' -f2 | awk '{ sum += $1 } END { printf "%02d:%02d:%02d",sum/3600,sum%3600/60,sum%60 }')"
  echo "$records" | cut -d'|' -f1
}

time_query()
{
  query="$(jq -r ".time_queries.$1.query" "$JIRA_CONFIG" | sed "s/##PROJECT##/$jira_project/" | sed "s/##USER##/$jira_user/")"
  jql="$(jq -r ".time_queries.$1.jq" "$JIRA_CONFIG")"
  epic_fetch="$(jq -r ".time_queries.$1.epic_fetch" "$JIRA_CONFIG")"
  tag_name="$(jq -r ".time_queries.$1.tag_name" "$JIRA_CONFIG")"
  check_not_null "$query"
  check_not_null "$jql"
  if [[ "$epic_fetch" == "true" ]]; then
    echo "$tag_name,Days,Percentage of Total,Epic Name"
  else
    echo "$tag_name,Days,Percentage of Total"
  fi
  fetch_all_for_jql "$query" "$jql" | jq -s \
    | jq -r '.[] | "\(.time),\(.tag)"' \
    | grep -v null \
    | awk 'BEGIN { FS = "," } ; { t[$2] += $1; total += $1 } END {for (x in t) printf "%s,%.1f,%.1f %%\n",x,t[x]/3600/8,100.0*t[x]/total ; printf "Total days: %.1f\n", total/3600/8}' | while read line; do
    if [[ "$epic_fetch" == "true" ]]; then
      echo "$line,$(ticket "$(echo "$line" | cut -d',' -f1)" | jq .fields.summary)"
    else
      echo "$line"
    fi

  done
}

################################################################################
# Do the actual work                                                           #
################################################################################
case "$1" in
  m|mine) mine ;;
  in_progress)
    shift 1
    for f in "$@"; do
      move_to_in_progress "$f"
    done
    ;;
  comment) comment "$2" "$3" ;;
  upload) file_upload "$2" "$3" ;;
  'done') tickets_done ;;
  all) all_open_tickets ;;
  counts) counts ;;
  get) get_tickets ;;
  w|work) my_board ;;
  assign) assign_to_me "$2" ;;
  query) run_query "$2" ;;
  v|view) view_ticket "$2" ;;
  log) work_log "$2" ;;
  t|time) work_time ;;
  tq) time_query "$2" ;;
  ticket) ticket "$2" ;;
  b|backlog) view_backlog ;;
  *)
    echo "Unknown command specified '$1'"
    echo ""
    echo "Try one of these:"
    echo "w | work : My Board"
    echo "v | view <ticket> : View a ticket"
    echo "m | mine : View tickets assigned to me"
    echo "t | time : get logged time since last Sunday"
    echo "in_progress [ticket numbers] : Move tickets to in progress"
    echo "comment <ticket> 'comment' : Comment on a ticket"
    echo "upload <ticket> <file> : Upload a file to a ticket"
    echo "done : Get completed tickets"
    echo "all : get all open tickets"
    echo "counts : Get ticket counts"
    echo "get : Get my tickets"
    echo "assign : Assign a ticket to my name"
    echo "query <name> : Run a named query"
    echo "log <ticket> : Get logged work on ticket"
  ;;
esac
